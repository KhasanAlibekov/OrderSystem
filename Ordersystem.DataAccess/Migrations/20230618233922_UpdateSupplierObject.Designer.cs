// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ordersystem.DataAccess;

#nullable disable

namespace Ordersystem.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230618233922_UpdateSupplierObject")]
    partial class UpdateSupplierObject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ordersystem.DataObjects.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Category_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Category_Name");

                    b.HasKey("CategoryID");

                    b.ToTable("TblCategory");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Watches"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Perfumes"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Eyewear"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Headphones"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Fitness Trackers"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Speakers"
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryName = "Kitchen Tools"
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryName = "Charging Accessories"
                        });
                });

            modelBuilder.Entity("Ordersystem.DataObjects.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Message_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message_Content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Message_Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message_Title");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Message_Type");

                    b.HasKey("MessageID");

                    b.ToTable("TblMessage");

                    b.HasData(
                        new
                        {
                            MessageID = 1,
                            Content = "Dear customers, we would like to inform you that there will be scheduled maintenance on our systems this weekend. During this time, you may experience temporary service interruptions. We apologize for any inconvenience caused and appreciate your understanding.",
                            Date = new DateTime(2023, 6, 19, 1, 39, 21, 858, DateTimeKind.Local).AddTicks(7581),
                            Title = "Important Update: Maintenance Schedule",
                            Type = 1
                        },
                        new
                        {
                            MessageID = 2,
                            Content = "We are excited to announce the release of a new feature that will enhance your experience on our platform. The feature allows you to customize your profile and personalize your settings. We hope you enjoy this new addition and look forward to your feedback.",
                            Date = new DateTime(2023, 6, 19, 1, 39, 21, 858, DateTimeKind.Local).AddTicks(7655),
                            Title = "Status Update: New Feature Release",
                            Type = 0
                        },
                        new
                        {
                            MessageID = 3,
                            Content = "Attention all users, we have recently detected suspicious activity on some user accounts. As a precautionary measure, we have reset passwords for those accounts and implemented additional security measures. Please ensure that your password is strong and unique. If you have any concerns, please contact our support team immediately.",
                            Date = new DateTime(2023, 6, 19, 1, 39, 21, 858, DateTimeKind.Local).AddTicks(7659),
                            Title = "Important Announcement: Security Alert",
                            Type = 1
                        },
                        new
                        {
                            MessageID = 4,
                            Content = "We are pleased to inform you that the service disruption we experienced earlier has been resolved. Our technical team has identified and resolved the issue, and all services are now operating normally. Thank you for your patience and understanding.",
                            Date = new DateTime(2023, 6, 19, 1, 39, 21, 858, DateTimeKind.Local).AddTicks(7661),
                            Title = "Status Update: Service Disruption Resolved",
                            Type = 0
                        },
                        new
                        {
                            MessageID = 5,
                            Content = "We are thrilled to announce the launch of our new product line. Join us on [Date] for an exclusive product launch event where you can be the first to experience our latest innovations. Don't miss this exciting opportunity to discover cutting-edge technology and explore new possibilities.",
                            Date = new DateTime(2023, 6, 19, 1, 39, 21, 858, DateTimeKind.Local).AddTicks(7663),
                            Title = "Important Announcement: Product Launch Event",
                            Type = 1
                        },
                        new
                        {
                            MessageID = 6,
                            Content = "We are currently undergoing a system upgrade to enhance performance and introduce new features. During this time, you may experience intermittent service disruptions. Rest assured, our team is working diligently to minimize any inconvenience. We appreciate your patience and understanding.",
                            Date = new DateTime(2023, 6, 19, 1, 39, 21, 858, DateTimeKind.Local).AddTicks(7666),
                            Title = "Status Update: System Upgrade",
                            Type = 0
                        },
                        new
                        {
                            MessageID = 7,
                            Content = "Mark your calendars for our highly anticipated annual sale event! Get ready for incredible discounts and exclusive offers on a wide range of products. This is your chance to save big and enjoy unbeatable deals. Don't miss out on this limited-time opportunity!",
                            Date = new DateTime(2023, 6, 19, 1, 39, 21, 858, DateTimeKind.Local).AddTicks(7669),
                            Title = "Important Announcement: Annual Sale Event",
                            Type = 1
                        },
                        new
                        {
                            MessageID = 8,
                            Content = "We are excited to introduce a new customer support channel to better serve you. Our dedicated support team is now available via live chat on our website. Simply visit our support page and click on the chat icon to connect with a representative. We're here to assist you with any inquiries or concerns.",
                            Date = new DateTime(2023, 6, 19, 1, 39, 21, 858, DateTimeKind.Local).AddTicks(7671),
                            Title = "Status Update: New Customer Support Channel",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Ordersystem.DataObjects.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("OrderCount")
                        .HasColumnType("int")
                        .HasColumnName("Order_OrderCount");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Order_OrderDate");

                    b.Property<bool>("OrderStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.HasKey("OrderID");

                    b.ToTable("TblOrder");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            OrderCount = 10,
                            OrderDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = true,
                            PaymentStatus = true
                        },
                        new
                        {
                            OrderID = 2,
                            OrderCount = 5,
                            OrderDate = new DateTime(2023, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = true,
                            PaymentStatus = false
                        },
                        new
                        {
                            OrderID = 3,
                            OrderCount = 8,
                            OrderDate = new DateTime(2023, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = false,
                            PaymentStatus = true
                        },
                        new
                        {
                            OrderID = 4,
                            OrderCount = 3,
                            OrderDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = true,
                            PaymentStatus = true
                        },
                        new
                        {
                            OrderID = 5,
                            OrderCount = 2,
                            OrderDate = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = false,
                            PaymentStatus = false
                        },
                        new
                        {
                            OrderID = 6,
                            OrderCount = 7,
                            OrderDate = new DateTime(2023, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = true,
                            PaymentStatus = true
                        },
                        new
                        {
                            OrderID = 7,
                            OrderCount = 4,
                            OrderDate = new DateTime(2023, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = true,
                            PaymentStatus = false
                        },
                        new
                        {
                            OrderID = 8,
                            OrderCount = 6,
                            OrderDate = new DateTime(2023, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = false,
                            PaymentStatus = true
                        });
                });

            modelBuilder.Entity("Ordersystem.DataObjects.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetail_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetail_Quantity");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("OrderDetail_UnitPrice");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("TblOrderDetail");

                    b.HasData(
                        new
                        {
                            OrderDetailID = 1,
                            OrderID = 2,
                            ProductID = 1,
                            Quantity = 18,
                            UnitPrice = 10.0
                        },
                        new
                        {
                            OrderDetailID = 2,
                            OrderID = 2,
                            ProductID = 3,
                            Quantity = 12,
                            UnitPrice = 5.9900000000000002
                        },
                        new
                        {
                            OrderDetailID = 3,
                            OrderID = 3,
                            ProductID = 2,
                            Quantity = 5,
                            UnitPrice = 100.98999999999999
                        },
                        new
                        {
                            OrderDetailID = 4,
                            OrderID = 3,
                            ProductID = 4,
                            Quantity = 2,
                            UnitPrice = 149.99000000000001
                        },
                        new
                        {
                            OrderDetailID = 5,
                            OrderID = 4,
                            ProductID = 6,
                            Quantity = 8,
                            UnitPrice = 49.990000000000002
                        },
                        new
                        {
                            OrderDetailID = 6,
                            OrderID = 4,
                            ProductID = 5,
                            Quantity = 3,
                            UnitPrice = 79.989999999999995
                        },
                        new
                        {
                            OrderDetailID = 7,
                            OrderID = 5,
                            ProductID = 7,
                            Quantity = 1,
                            UnitPrice = 89.989999999999995
                        },
                        new
                        {
                            OrderDetailID = 8,
                            OrderID = 5,
                            ProductID = 8,
                            Quantity = 4,
                            UnitPrice = 29.989999999999998
                        });
                });

            modelBuilder.Entity("Ordersystem.DataObjects.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product_Description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product_ImageUrl");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Product_Price");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product_Title");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int")
                        .HasColumnName("Product_UnitInStock");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("TblProduct");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 1,
                            Description = "Add a touch of sophistication to your style with this elegant wristwatch. Featuring a sleek design and precise timekeeping, it's a perfect accessory for both formal and casual occasions.",
                            ImageUrl = "",
                            Price = 9.9900000000000002,
                            SupplierID = 1,
                            Title = "Elegant Wristwatch",
                            UnitInStock = 10
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 1,
                            Description = "Indulge your senses with this luxurious perfume. With its captivating fragrance and long-lasting scent, it's sure to leave a lasting impression. Perfect for special occasions or everyday wear.",
                            ImageUrl = "",
                            Price = 100.98999999999999,
                            SupplierID = 2,
                            Title = "Luxurious Perfume",
                            UnitInStock = 666
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 1,
                            Description = "Protect your eyes in style with these fashionable sunglasses. Designed with UV protection and a trendy frame, they not only shield your eyes from the sun but also elevate your fashion game.",
                            ImageUrl = "",
                            Price = 0.98999999999999999,
                            SupplierID = 3,
                            Title = "Stylish Sunglasses",
                            UnitInStock = 879
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 2,
                            Description = "Immerse yourself in high-quality audio with these premium headphones. Perfect for music lovers and audiophiles, these headphones deliver exceptional sound clarity and comfort.",
                            ImageUrl = "",
                            Price = 149.99000000000001,
                            SupplierID = 4,
                            Title = "Premium Headphones",
                            UnitInStock = 5
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 2,
                            Description = "Track your fitness goals and monitor your health with this advanced smart fitness tracker. It features an intuitive touchscreen, heart rate monitoring, sleep tracking, and a variety of sports modes to help you stay active and motivated.",
                            ImageUrl = "",
                            Price = 79.989999999999995,
                            SupplierID = 5,
                            Title = "Smart Fitness Tracker",
                            UnitInStock = 8
                        },
                        new
                        {
                            ProductID = 6,
                            CategoryID = 3,
                            Description = "Take your music wherever you go with this portable Bluetooth speaker. With its compact design and powerful sound output, it's perfect for outdoor gatherings, parties, and trips. Enjoy wireless connectivity and long battery life.",
                            ImageUrl = "",
                            Price = 49.990000000000002,
                            SupplierID = 6,
                            Title = "Bluetooth Speaker",
                            UnitInStock = 15
                        },
                        new
                        {
                            ProductID = 7,
                            CategoryID = 3,
                            Description = "Enhance your culinary skills with this high-quality professional chef's knife. The razor-sharp blade is crafted from premium stainless steel for precision cutting and durability. A must-have tool for every aspiring chef.",
                            ImageUrl = "",
                            Price = 89.989999999999995,
                            SupplierID = 7,
                            Title = "Chef's Knife",
                            UnitInStock = 3
                        },
                        new
                        {
                            ProductID = 8,
                            CategoryID = 3,
                            Description = "Simplify your charging routine with this wireless charging pad. Compatible with a wide range of smartphones and devices, it provides fast and convenient charging without the hassle of cables. Just place your device on the pad and let it power up.",
                            ImageUrl = "",
                            Price = 29.989999999999998,
                            SupplierID = 8,
                            Title = "Wireless Charging Pad",
                            UnitInStock = 12
                        });
                });

            modelBuilder.Entity("Ordersystem.DataObjects.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Supplier_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Supplier_Address");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Supplier_City");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Supplier_Country");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Supplier_Email");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Supplier_PhoneNumber");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Supplier_PostalCode");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Supplier_Name");

                    b.Property<int>("VATNumber")
                        .HasColumnType("int")
                        .HasColumnName("Supplier_VATNumber");

                    b.HasKey("SupplierID");

                    b.ToTable("TblSupplier");

                    b.HasData(
                        new
                        {
                            SupplierID = 1,
                            Address = "Pluim 4",
                            City = "Zwevegem",
                            Country = "Belgium",
                            Email = "notyours@gmail.com",
                            Phone = "0478688699",
                            PostalCode = "9807",
                            SupplierName = "Syntra",
                            VATNumber = 123456789
                        },
                        new
                        {
                            SupplierID = 2,
                            Address = "123 Main Street",
                            City = "New York",
                            Country = "United States",
                            Email = "abc@corporation.com",
                            Phone = "555-1234",
                            PostalCode = "10001",
                            SupplierName = "ABC Corporation",
                            VATNumber = 987654321
                        },
                        new
                        {
                            SupplierID = 3,
                            Address = "456 Elm Avenue",
                            City = "London",
                            Country = "United Kingdom",
                            Email = "info@xyzltd.com",
                            Phone = "+44 20 1234 5678",
                            PostalCode = "SW1A 1AA",
                            SupplierName = "XYZ Ltd.",
                            VATNumber = 654321987
                        },
                        new
                        {
                            SupplierID = 4,
                            Address = "789 Oak Lane",
                            City = "Sydney",
                            Country = "Australia",
                            Email = "sales@globale.com",
                            Phone = "+61 2 9876 5432",
                            PostalCode = "2000",
                            SupplierName = "Global Enterprises",
                            VATNumber = 246813579
                        },
                        new
                        {
                            SupplierID = 5,
                            Address = "10 Park Avenue",
                            City = "Toronto",
                            Country = "Canada",
                            Email = "info@megasuppliers.com",
                            Phone = "+1 416-123-4567",
                            PostalCode = "M5B 1B1",
                            SupplierName = "Mega Suppliers Inc.",
                            VATNumber = 135792468
                        },
                        new
                        {
                            SupplierID = 6,
                            Address = "Rue de la Liberté",
                            City = "Paris",
                            Country = "France",
                            Email = "contact@eurotrade.com",
                            Phone = "+33 1 2345 6789",
                            PostalCode = "75001",
                            SupplierName = "Euro Trade",
                            VATNumber = 864209753
                        },
                        new
                        {
                            SupplierID = 7,
                            Address = "123 Market Street",
                            City = "Tokyo",
                            Country = "Japan",
                            Email = "sales@asiawholesale.com",
                            Phone = "+81 3-1234-5678",
                            PostalCode = "100-0005",
                            SupplierName = "Asia Wholesale",
                            VATNumber = 370592864
                        },
                        new
                        {
                            SupplierID = 8,
                            Address = "Avenida del Sol",
                            City = "São Paulo",
                            Country = "Brazil",
                            Email = "info@southamericasup",
                            Phone = "+55 11 98765-4321",
                            PostalCode = "01234-567",
                            SupplierName = "SouthAmerica Suppliers",
                            VATNumber = 958746213
                        });
                });

            modelBuilder.Entity("Ordersystem.DataObjects.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ordersystem.DataObjects.OrderDetail", b =>
                {
                    b.HasOne("Ordersystem.DataObjects.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ordersystem.DataObjects.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ordersystem.DataObjects.Product", b =>
                {
                    b.HasOne("Ordersystem.DataObjects.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ordersystem.DataObjects.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
